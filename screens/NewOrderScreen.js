import React, { useState, useEffect } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  ScrollView, 
  TouchableOpacity, 
  TextInput,
  Alert,
  ActivityIndicator 
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { supabase, ordersAPI, pushNotificationsAPI } from '../supabase';
import AsyncStorage from '@react-native-async-storage/async-storage';
import pushNotificationSender from '../utils/pushNotificationSender';

export default function NewOrderScreen({ navigation }) {
  const [description, setDescription] = useState('');
  const [amount, setAmount] = useState('');
  const [address, setAddress] = useState('');
  const [phone, setPhone] = useState('');
  const [isUrgent, setIsUrgent] = useState(false); // ุชู ุชุนุทูู ุฎูุงุฑ ุงูุทูุจ ุงูุนุงุฌู (ูู ููุฑุณู ูุนุงุฌู ุญุงููุงู)
  const [loading, setLoading] = useState(false);
  const [storeInfo, setStoreInfo] = useState(null);
  const [storeLocationUrl, setStoreLocationUrl] = useState('');

  useEffect(() => {
    loadStoreInfo();
  }, []);

  const loadStoreInfo = async () => {
    try {
      const storeId = await AsyncStorage.getItem('userId');
      if (storeId) {
        const { data, error } = await supabase
          .from('stores')
          .select('*')
          .eq('id', storeId)
          .single();
        
        if (!error && data) {
          setStoreInfo(data);
          setStoreLocationUrl(data.location_url || '');
        }
      }
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุชุญููู ูุนูููุงุช ุงููุชุฌุฑ:', error);
    }
  };

  const validateForm = () => {
    if (!description.trim()) {
      Alert.alert('ุฎุทุฃ', 'ูุฑุฌู ุฅุฏุฎุงู ูุตู ุงูุทูุจ');
      return false;
    }
    
    if (!amount.trim()) {
      Alert.alert('ุฎุทุฃ', 'ูุฑุฌู ุฅุฏุฎุงู ูุจูุบ ุงูุทูุจ');
      return false;
    }
    
    if (isNaN(amount) || parseFloat(amount) <= 0) {
      Alert.alert('ุฎุทุฃ', 'ูุฑุฌู ุฅุฏุฎุงู ูุจูุบ ุตุญูุญ ุฃูุจุฑ ูู ุตูุฑ');
      return false;
    }
    
    if (!address.trim()) {
      Alert.alert('ุฎุทุฃ', 'ูุฑุฌู ุฅุฏุฎุงู ุนููุงู ุงูุชูุตูู');
      return false;
    }
    
    if (!phone.trim()) {
      Alert.alert('ุฎุทุฃ', 'ูุฑุฌู ุฅุฏุฎุงู ุฑูู ุงููุงุชู');
      return false;
    }
    
    // ุงูุชุญูู ูู ุตุญุฉ ุฑูู ุงููุงุชู ุงูุนุฑุงูู
    const phoneRegex = /^07[3-9]\d{8}$/;
    if (!phoneRegex.test(phone)) {
      Alert.alert('ุฎุทุฃ', 'ูุฑุฌู ุฅุฏุฎุงู ุฑูู ูุงุชู ุนุฑุงูู ุตุญูุญ (ูุซุงู: 07801234567)');
      return false;
    }
    
    return true;
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;

    setLoading(true);
    try {
      console.log('=== ุจุฏุงูุฉ ุฅูุดุงุก ุทูุจ ุฌุฏูุฏ ===');
      
      // ุงูุญุตูู ุนูู ูุนุฑู ุงููุชุฌุฑ ูู AsyncStorage
      const storeId = await AsyncStorage.getItem('userId');
      if (!storeId) {
        throw new Error('ูู ูุชู ุงูุนุซูุฑ ุนูู ูุนุฑู ุงููุชุฌุฑ');
      }

      console.log('ูุนุฑู ุงููุชุฌุฑ:', storeId);
      console.log('ุชูุงุตูู ุงูุทูุจ:', {
        description,
        amount: parseFloat(amount),
        address,
        phone
      });

      // ุฅูุดุงุก ุงูุทูุจ ุจุงุณุชุฎุฏุงู API ุงูุฌุฏูุฏ
      const { data, error } = await ordersAPI.createOrder({
        store_id: parseInt(storeId),
        customer_name: 'ุนููู',
        customer_phone: phone,
        pickup_address: storeInfo?.address || 'ุนููุงู ุงููุชุฌุฑ',
        delivery_address: address,
        items_description: description,
        description: description,
        total_amount: parseFloat(amount),
        delivery_fee: 0,
        // ุฅููุงู ุฎุงุตูุฉ ุงูุทูุจ ุงูุนุงุฌู ูุคูุชุงู - ูุฑุณู ูู ุงูุทูุจุงุช ูุบูุฑ ุนุงุฌูุฉ
        is_urgent: false,
        payment_method: 'cash',
        payment_status: 'pending',
        status: 'pending',
        driver_id: null,
        store_location_url: storeLocationUrl
      });

      if (error) {
        console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุงูุทูุจ:', error);
        throw new Error('ูุดู ูู ุฅูุดุงุก ุงูุทูุจ: ' + error.message);
      }

      console.log('ุชู ุฅูุดุงุก ุงูุทูุจ ุจูุฌุงุญ:', data);

      // ุฅุฑุณุงู ุฅุดุนุงุฑ Push ูุฌููุน ุงูุณุงุฆููู ุงููุชุงุญูู
      try {
        const orderData = {
          id: data.id,
          store_name: storeInfo?.name || 'ูุชุฌุฑ',
          total_amount: parseFloat(amount),
          pickup_address: storeInfo?.address || 'ุนููุงู ุงููุชุฌุฑ',
          delivery_address: address
        };
        
        const notificationResult = await pushNotificationsAPI.sendNewOrderNotificationToDrivers(orderData);
        if (notificationResult.success) {
          console.log('ุชู ุฅุฑุณุงู ุฅุดุนุงุฑุงุช Push ููุณุงุฆููู:', notificationResult.message);
        } else {
          console.log('ูุดู ูู ุฅุฑุณุงู ุฅุดุนุงุฑุงุช Push:', notificationResult.error);
        }
      } catch (notificationError) {
        console.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุฅุดุนุงุฑุงุช Push:', notificationError);
        // ูุง ูููู ุงูุนูููุฉ ุฅุฐุง ูุดู ุฅุฑุณุงู ุงูุฅุดุนุงุฑุงุช
      }

      // ุชุญุฏูุซ ุฅุญุตุงุฆูุงุช ุงููุชุฌุฑ
      await supabase
        .from('stores')
        .update({ 
          total_orders: (storeInfo?.total_orders || 0) + 1,
          total_revenue: (storeInfo?.total_revenue || 0) + parseFloat(amount)
        })
        .eq('id', storeId);

      // ุฅุฑุณุงู Push Notifications ูุฌููุน ุงูุณุงุฆููู
      await sendPushNotificationsToDrivers(data);

      Alert.alert(
        'ุชู ุฅูุดุงุก ุงูุทูุจ ุจูุฌุงุญ! ๐',
        'ุชู ุฅุฑุณุงู ุงูุทูุจ ูุฌููุน ุงูุณุงุฆููู ุงููุชุงุญูู. ุณูุชู ุฅุดุนุงุฑู ุนูุฏ ูุจูู ุฃุญุฏ ุงูุณุงุฆููู ููุทูุจ.',
        [
          {
            text: 'ุนุฑุถ ุงูุทูุจุงุช',
            onPress: () => navigation.navigate('StoreOrders')
          },
          {
            text: 'ุฅูุดุงุก ุทูุจ ุขุฎุฑ',
            onPress: () => {
              setDescription('');
              setAmount('');
              setAddress('');
              setPhone('');
            }
          }
        ]
      );

    } catch (error) {
      console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุงูุทูุจ:', error);
      Alert.alert('ุฎุทุฃ', error.message || 'ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน ูู ุฅูุดุงุก ุงูุทูุจ');
    } finally {
      setLoading(false);
    }
  };

  // ุฏุงูุฉ ุฅุฑุณุงู Push Notifications ููุณุงุฆููู
  const sendPushNotificationsToDrivers = async (orderData) => {
    try {
      console.log('ุจุฏุก ุฅุฑุณุงู Push Notifications ููุณุงุฆููู...');
      
      // ุฅุถุงูุฉ ูุนูููุงุช ุงููุชุฌุฑ ููุทูุจ
      const orderWithStoreInfo = {
        ...orderData,
        store_name: storeInfo?.name || 'ูุชุฌุฑ',
        store_category: storeInfo?.category || 'ุนุงู'
      };

      // ูุญุงููุฉ ุฅุฑุณุงู ุงูุฅุดุนุงุฑุงุช ููุณุงุฆููู ูู ุงูููุทูุฉ ุฃููุงู
      if (storeInfo?.latitude && storeInfo?.longitude) {
        console.log('ุฅุฑุณุงู ุฅุดุนุงุฑุงุช ููุณุงุฆููู ูู ุงูููุทูุฉ...');
        const nearbyResult = await pushNotificationSender.sendNewOrderNotificationToNearbyDrivers(
          orderWithStoreInfo,
          storeInfo.latitude,
          storeInfo.longitude,
          10 // 10 ูู
        );
        
        if (nearbyResult.success) {
          console.log(`ุชู ุฅุฑุณุงู ุฅุดุนุงุฑุงุช ูู ${nearbyResult.successCount} ุณุงุฆู ูู ุงูููุทูุฉ`);
        } else {
          console.log('ูุง ููุฌุฏ ุณุงุฆููู ูู ุงูููุทูุฉุ ุฅุฑุณุงู ูุฌููุน ุงูุณุงุฆููู...');
        }
      }

      // ุฅุฑุณุงู ุฅุดุนุงุฑุงุช ูุฌููุน ุงูุณุงุฆููู ูุงุญุชูุงุทู
      console.log('ุฅุฑุณุงู ุฅุดุนุงุฑุงุช ูุฌููุน ุงูุณุงุฆููู...');
      const allDriversResult = await pushNotificationSender.sendNewOrderNotification(orderWithStoreInfo);
      
      if (allDriversResult.success) {
        console.log(`ุชู ุฅุฑุณุงู ุฅุดุนุงุฑุงุช ูู ${allDriversResult.successCount} ุณุงุฆู ูู ุฃุตู ${allDriversResult.totalCount}`);
        
        // ุชุณุฌูู ูุฌุงุญ ุงูุฅุฑุณุงู
        await pushNotificationsAPI.logPushNotification(
          parseInt(await AsyncStorage.getItem('userId')),
          'store',
          'new_order',
          'ุทูุจ ุฌุฏูุฏ',
          `ุชู ุฅุฑุณุงู ุทูุจ ุฌุฏูุฏ ูู ${allDriversResult.successCount} ุณุงุฆู`,
          { orderId: orderData.id, successCount: allDriversResult.successCount },
          null,
          true,
          null,
          allDriversResult
        );
      } else {
        console.error('ูุดู ูู ุฅุฑุณุงู Push Notifications:', allDriversResult.error);
        
        // ุชุณุฌูู ูุดู ุงูุฅุฑุณุงู
        await pushNotificationsAPI.logPushNotification(
          parseInt(await AsyncStorage.getItem('userId')),
          'store',
          'new_order',
          'ุทูุจ ุฌุฏูุฏ',
          'ูุดู ูู ุฅุฑุณุงู ุงูุฅุดุนุงุฑุงุช ููุณุงุฆููู',
          { orderId: orderData.id },
          null,
          false,
          allDriversResult.error,
          allDriversResult
        );
      }

    } catch (error) {
      console.error('ุฎุทุฃ ูู ุฅุฑุณุงู Push Notifications:', error);
      
      // ุชุณุฌูู ุงูุฎุทุฃ
      try {
        await pushNotificationsAPI.logPushNotification(
          parseInt(await AsyncStorage.getItem('userId')),
          'store',
          'new_order',
          'ุทูุจ ุฌุฏูุฏ',
          'ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฅุดุนุงุฑุงุช',
          { orderId: orderData.id },
          null,
          false,
          error.message,
          { error: error.toString() }
        );
      } catch (logError) {
        console.error('ูุดู ูู ุชุณุฌูู ุงูุฎุทุฃ:', logError);
      }
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
          <Ionicons name="arrow-back" size={24} color="#fff" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>ุทูุจ ุฌุฏูุฏ</Text>
        <View style={{ width: 40 }} />
      </View>

      <ScrollView style={styles.content}>
        <View style={styles.formContainer}>
          <Text style={styles.sectionTitle}>ุชูุงุตูู ุงูุทูุจ</Text>

          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>ูุตู ุงูุทูุจ *</Text>
            <TextInput
              style={[styles.input, styles.textArea]}
              placeholder="ุงูุชุจ ุชูุงุตูู ุงูุทูุจ ููุง..."
              placeholderTextColor="#BDBDBD"
              value={description}
              onChangeText={setDescription}
              multiline
              numberOfLines={4}
              textAlign="right"
            />
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>ุงููุจูุบ (ุฏููุงุฑ) *</Text>
            <TextInput
              style={styles.input}
              placeholder="0.00"
              placeholderTextColor="#BDBDBD"
              value={amount}
              onChangeText={setAmount}
              keyboardType="numeric"
              textAlign="right"
            />
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>ุนููุงู ุงูุชูุตูู *</Text>
            <TextInput
              style={styles.input}
              placeholder="ุฃุฏุฎู ุนููุงู ุงูุชูุตูู"
              placeholderTextColor="#BDBDBD"
              value={address}
              onChangeText={setAddress}
              textAlign="right"
            />
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>ุฑูู ูุงุชู ุงูุฒุจูู *</Text>
            <TextInput
              style={styles.input}
              placeholder="07801234567"
              placeholderTextColor="#BDBDBD"
              value={phone}
              onChangeText={setPhone}
              keyboardType="phone-pad"
              textAlign="right"
              maxLength={11}
            />
          </View>

          {/* ุฎูุงุฑ 'ุทูุจ ุนุงุฌู' ูุนุทู ูุคูุชุงู - ุณูุชู ุชุทููุฑู ูุงุญูุงู */}

          <View style={styles.infoBox}>
            <Ionicons name="information-circle-outline" size={24} color="#2196F3" />
            <Text style={styles.infoText}>
              ุณูุชู ุฅุฑุณุงู ุงูุทูุจ ููุณุงุฆููู ุงููุชุงุญูู ูู ููุทูุชู
            </Text>
          </View>

          <TouchableOpacity 
            style={styles.submitButton} 
            onPress={handleSubmit}
            disabled={loading}
          >
            <LinearGradient
              colors={["#FFD600", "#FF9800"]}
              start={{ x: 0, y: 0 }} 
              end={{ x: 1, y: 0 }}
              style={styles.submitGradient}
            >
              {loading ? (
                <ActivityIndicator size="small" color="#fff" />
              ) : (
                <>
                  <Ionicons name="add-circle-outline" size={24} color="#fff" />
                  <Text style={styles.submitText}>ุฅูุดุงุก ุงูุทูุจ</Text>
                </>
              )}
            </LinearGradient>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#FF9800',
    paddingHorizontal: 16,
    paddingTop: 50,
    paddingBottom: 16,
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  formContainer: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 20,
    textAlign: 'center',
  },
  inputGroup: {
    marginBottom: 20,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    backgroundColor: '#f9f9f9',
    textAlign: 'right',
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  infoBox: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#E3F2FD',
    padding: 16,
    borderRadius: 8,
    marginBottom: 24,
  },
  infoText: {
    fontSize: 14,
    color: '#1976D2',
    marginLeft: 12,
    flex: 1,
  },
  submitButton: {
    borderRadius: 12,
    overflow: 'hidden',
  },
  submitGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    paddingHorizontal: 24,
  },
  submitText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  // ุฃููุงุท ุงูุทูุจ ุงูุนุงุฌู
  urgentSection: {
    marginBottom: 20,
  },
  urgentToggle: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f9f9f9',
    padding: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#ddd',
  },
  checkbox: {
    width: 24,
    height: 24,
    borderRadius: 4,
    borderWidth: 2,
    borderColor: '#ddd',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  checkboxChecked: {
    backgroundColor: '#F44336',
    borderColor: '#F44336',
  },
  urgentInfo: {
    flex: 1,
  },
  urgentLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  urgentDescription: {
    fontSize: 12,
    color: '#666',
  },
  urgentBadge: {
    backgroundColor: '#F44336',
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  urgentBadgeText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
    marginLeft: 4,
  },
}); 